{"version":3,"sources":["services/helper.js","App/Board/Cell/index.js","App/Board/Cell/Snake/index.js","App/Board/Cell/Food/index.js","services/snake.js","services/food.js","services/game.js","App/Board/index.js","App/index.js","serviceWorker.js","index.js"],"names":["kMaxCells","kTimeInterval","isValidInput","input","name","undefined","Error","concat","randomNumberBetween","start","end","Math","floor","random","Cell","props","react_default","a","createElement","id","className","width","isInFirstRow","children","SnakeBox","isHead","direction","FoodBox","SnakeServiceEvents","ArrowKeysReact","events","HOCSnakeService","origin","Component","result","x","y","INITIAL_STATE","squares","_React$Component","SnakeService","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateNewFoodPosition","newFood","size","height","isUnderSnake","state","filter","square","length","hasEmptySquares","food","setOrigin","gameOver","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","game","setPlaying","clearInterval","intervalId","stop","timer","_callee2","head","i","isTouchingSelf","_context2","isPlaying","abrupt","toConsumableArray","objectSpread","t0","setWon","setState","resetGame","_callee3","_context3","setInterval","config","left","right","up","down","inherits","createClass","key","value","previousProps","previousState","tail","assign","snake","score","reset","React","HOCFoodService","FoodService","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","newOrigin","HOCGameService","GameService","hasWon","newPlaying","then","Board","generateCols","h","row","_loop","w","isSnakeCell","isHeadSnake","isFoodBox","push","Board_Cell","ceil","Snake","Food","board","focus","_this2","ref","el","tabIndex","role","type","onClick","App","App_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e456839e.chunk.js","sourcesContent":["export const kMinCells = 1\nexport const kMaxCells = 12\nexport const kTimeInterval = 500\n\nexport const isValidInput = (input, name) => {\n  if (input === undefined || input === null) {\n    return new Error(`\"${name}\" is required.`)\n  }\n  if (typeof input !== 'number') {\n    return new Error(`\"${name}\" must be a number.`)\n  }\n  if (input < kMinCells || input > kMaxCells) {\n    return new Error(`\"${name}\" must be inclusively between 1-12.`)\n  }\n}\n\nexport const randomNumberBetween = (start, end) => {\n  return Math.floor(Math.random() * end) + start\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isValidInput } from 'services/helper'\nimport './styles.scss'\n\nfunction Cell(props) {\n  return (\n    <div\n      id=\"board-cell\"\n      className={`col-${props.width} ${\n        props.isInFirstRow ? 'is-first-row' : ''\n      }`}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nCell.propTypes = {\n  width: function(props, propName) {\n    return isValidInput(props[propName], 'width')\n  },\n  children: PropTypes.any,\n  isInFirstRow: PropTypes.bool\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\n\nfunction SnakeBox(props) {\n  return (\n    <div className={`snake ${props.isHead ? 'head' : ''} ${props.direction}`} />\n  )\n}\n\nSnakeBox.propTypes = {\n  isHead: PropTypes.bool,\n  direction: PropTypes.oneOf(['right', 'left', 'up', 'down']).isRequired\n}\n\nexport default SnakeBox\n","import React from 'react'\nimport './styles.scss'\n\nfunction FoodBox(props) {\n  return <div id=\"food\" />\n}\n\nexport default FoodBox\n","import React from 'react'\nimport ArrowKeysReact from 'arrow-keys-react'\nimport PropTypes from 'prop-types'\nimport {\n  isValidInput,\n  kTimeInterval,\n  randomNumberBetween\n} from 'services/helper'\n\nexport const SnakeServiceEvents = ArrowKeysReact.events\n\nconst HOCSnakeService = origin => Component => {\n  let result = isValidInput(origin.x + 1, 'origin.x')\n  if (result) throw result\n  result = isValidInput(origin.y + 1, 'origin.y')\n  if (result) throw result\n\n  const INITIAL_STATE = {\n    squares: [origin],\n    direction: 'right'\n  }\n\n  class SnakeService extends React.Component {\n    constructor() {\n      super()\n\n      this.state = INITIAL_STATE\n\n      ArrowKeysReact.config({\n        left: () => {\n          if (this.state.direction !== 'right') {\n            this.setState({ direction: 'left' })\n          }\n        },\n        right: () => {\n          if (this.state.direction !== 'left') {\n            this.setState({ direction: 'right' })\n          }\n        },\n        up: () => {\n          if (this.state.direction !== 'down') {\n            this.setState({ direction: 'up' })\n          }\n        },\n        down: () => {\n          if (this.state.direction !== 'up') {\n            this.setState({ direction: 'down' })\n          }\n        }\n      })\n    }\n\n    componentDidMount() {\n      this.resetGame()\n    }\n\n    componentWillUnmount() {\n      return this.gameOver()\n    }\n\n    componentDidUpdate(previousProps, previousState) {\n      const head = this.state.squares[0]\n      const food = this.props.food.origin\n\n      if (food.x === head.x && food.y === head.y) {\n        this.setState(state => {\n          const tail = { ...state.squares[state.squares.length - 1] }\n          return {\n            squares: state.squares.concat(tail)\n          }\n        })\n        this.generateNewFoodPosition()\n      }\n    }\n\n    generateNewFoodPosition = () => {\n      const newFood = {\n        x: randomNumberBetween(0, this.props.size.width),\n        y: randomNumberBetween(0, this.props.size.height)\n      }\n\n      const isUnderSnake =\n        this.state.squares.filter(square => {\n          return square.x === newFood.x && square.y === newFood.y\n        }).length > 0\n      const hasEmptySquares =\n        this.props.size.width * this.props.size.height >\n        this.state.squares.length\n      if (isUnderSnake && hasEmptySquares) {\n        return this.generateNewFoodPosition()\n      } else {\n        this.props.food.setOrigin(newFood)\n      }\n    }\n\n    gameOver = async () => {\n      await this.props.game.setPlaying(false)\n      clearInterval(this.intervalId)\n    }\n\n    timer = async () => {\n      if (!this.props.game.isPlaying) return\n\n      const squares = [...this.state.squares]\n      const head = { ...squares[0] }\n\n      for (let i = squares.length - 1; i > 0; i--) {\n        squares[i] = { ...squares[i - 1] }\n      }\n\n      switch (this.state.direction) {\n        case 'up':\n          if (head.y > 0) {\n            head.y = head.y - 1\n          } else {\n            await this.gameOver()\n            return\n          }\n          break\n        case 'down':\n          if (head.y < this.props.size.height - 1) {\n            head.y = head.y + 1\n          } else {\n            await this.gameOver()\n            return\n          }\n          break\n        case 'right':\n          if (head.x < this.props.size.width - 1) {\n            head.x = head.x + 1\n          } else {\n            await this.gameOver()\n            return\n          }\n          break\n        case 'left':\n        default:\n          if (head.x > 0) {\n            head.x = head.x - 1\n          } else {\n            await this.gameOver()\n            return\n          }\n      }\n\n      const isTouchingSelf =\n        squares.filter(square => {\n          return square.x === head.x && square.y === head.y\n        }).length > 0\n      const hasEmptySquares =\n        this.props.size.width * this.props.size.height > squares.length\n\n      if (!hasEmptySquares) {\n        this.props.game.setWon(true)\n        return\n      } else if (isTouchingSelf && hasEmptySquares) {\n        await this.gameOver()\n        return\n      }\n      squares[0] = head\n\n      this.setState({\n        squares\n      })\n    }\n\n    resetGame = async () => {\n      await this.setState(INITIAL_STATE)\n\n      const intervalId = setInterval(this.timer, kTimeInterval)\n      this.intervalId = intervalId\n      this.props.game.setPlaying(true)\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          snake={this.state}\n          game={{\n            ...this.props.game,\n            score: this.state.squares.length - 1,\n            reset: this.resetGame\n          }}\n        />\n      )\n    }\n  }\n\n  SnakeService.propTypes = {\n    size: PropTypes.shape({\n      width: function(props, propName) {\n        return isValidInput(props[propName], 'size.width')\n      },\n      height: function(props, propName) {\n        return isValidInput(props[propName], 'size.height')\n      }\n    }).isRequired,\n    food: PropTypes.shape({\n      origin: PropTypes.shape({\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired\n      }).isRequired,\n      setOrigin: PropTypes.func.isRequired\n    }).isRequired,\n    game: PropTypes.shape({\n      isPlaying: PropTypes.bool,\n      setPlaying: PropTypes.func.isRequired,\n      setWon: PropTypes.func.isRequired\n    }).isRequired\n  }\n\n  return SnakeService\n}\n\nexport default HOCSnakeService\n","import React from 'react'\nimport { isValidInput } from 'services/helper'\n\nconst HOCFoodService = origin => Component => {\n  let result = isValidInput(origin.x + 1, 'origin.x')\n  if (result) throw result\n  result = isValidInput(origin.y + 1, 'origin.y')\n  if (result) throw result\n\n  class FoodService extends React.Component {\n    state = {\n      origin\n    }\n\n    setOrigin = newOrigin => {\n      let result = isValidInput(newOrigin.x + 1, 'origin.x')\n      if (result) throw result\n      result = isValidInput(newOrigin.y + 1, 'origin.y')\n      if (result) throw result\n\n      return this.setState({\n        origin: newOrigin\n      })\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          food={{\n            ...this.state,\n            setOrigin: this.setOrigin\n          }}\n        />\n      )\n    }\n  }\n\n  return FoodService\n}\n\nexport default HOCFoodService\n","import React from 'react'\n\nconst HOCGameService = Component => {\n  class GameService extends React.Component {\n    state = {\n      isPlaying: true,\n      hasWon: true\n    }\n\n    setPlaying = newPlaying => {\n      if (typeof newPlaying !== 'boolean') {\n        throw new Error('\"setPlaying\" takes a boolean value.')\n      }\n\n      return this.setState({\n        isPlaying: newPlaying,\n        hasWon: false\n      })\n    }\n\n    setWon = () => {\n      return this.setPlaying(false).then(() =>\n        this.setState({\n          hasWon: true\n        })\n      )\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          game={{\n            ...this.state,\n            setPlaying: this.setPlaying,\n            setWon: this.setWon\n          }}\n        />\n      )\n    }\n  }\n\n  return GameService\n}\n\nexport default HOCGameService\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\nimport SnakeBox from './Cell/Snake'\nimport FoodBox from './Cell/Food'\nimport { isValidInput, kMaxCells } from 'services/helper'\nimport SnakeService, { SnakeServiceEvents } from 'services/snake'\nimport FoodService from 'services/food'\nimport GameService from 'services/game'\n\nclass Board extends React.Component {\n  generateCols = h => {\n    let row = []\n    for (let w = 0; w < this.props.size.width; w++) {\n      const isSnakeCell =\n        this.props.snake.squares.filter(square => {\n          return square.x === w && square.y === h\n        }).length > 0\n      const isHeadSnake =\n        this.props.snake.squares[0].x === w &&\n        this.props.snake.squares[0].y === h\n      const isFoodBox =\n        this.props.food.origin.x === w && this.props.food.origin.y === h\n\n      row.push(\n        <Cell\n          key={`w-${w}`}\n          width={Math.ceil(kMaxCells / this.props.size.width)}\n          isInFirstRow={h === 0}\n        >\n          {isSnakeCell ? (\n            <SnakeBox\n              isHead={isHeadSnake}\n              direction={this.props.snake.direction}\n            />\n          ) : isFoodBox ? (\n            <FoodBox />\n          ) : null}\n        </Cell>\n      )\n    }\n\n    return row\n  }\n\n  componentDidMount() {\n    this.board.focus()\n  }\n\n  render() {\n    let board = []\n    for (let h = 0; h < this.props.size.height; h++) {\n      board.push(\n        <div\n          id=\"board-row\"\n          key={`h-${h}`}\n          className=\"row no-gutters justify-content-center align-items-center\"\n        >\n          {this.generateCols(h)}\n        </div>\n      )\n    }\n\n    return (\n      <div ref={el => (this.board = el)} {...SnakeServiceEvents} tabIndex=\"1\">\n        <div className=\"row no-gutters\">\n          <div className=\"col-12 justify-content-between\">\n            <h1>Snake Game</h1>\n            {!this.props.game.isPlaying ? (\n              this.props.game.hasWon ? (\n                <div className=\"alert alert-success col-auto\" role=\"alert\">\n                  You&#39;ve Won!\n                  <button\n                    className=\"btn btn-secondary ml-2 p-2\"\n                    type=\"button\"\n                    onClick={() => this.props.game.reset()}\n                  >\n                    Play Again\n                  </button>\n                </div>\n              ) : (\n                <div className=\"alert alert-danger col-auto\" role=\"alert\">\n                  Game Over :(\n                  <button\n                    className=\"btn btn-secondary ml-2 p-2\"\n                    type=\"button\"\n                    onClick={() => this.props.game.reset()}\n                  >\n                    Play Again\n                  </button>\n                </div>\n              )\n            ) : null}\n            <h5>Score: {this.props.game.score}</h5>\n          </div>\n        </div>\n        {board}\n      </div>\n    )\n  }\n}\n\nBoard.propTypes = {\n  size: PropTypes.shape({\n    width: function(props, propName) {\n      return isValidInput(props[propName], 'size.width')\n    },\n    height: function(props, propName) {\n      return isValidInput(props[propName], 'size.height')\n    }\n  }).isRequired,\n  snake: PropTypes.shape({\n    squares: PropTypes.arrayOf(\n      PropTypes.shape({\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired\n      })\n    ).isRequired,\n    direction: PropTypes.oneOf(['right', 'left', 'up', 'down'])\n  }).isRequired,\n  food: PropTypes.shape({\n    origin: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired\n    }).isRequired\n  }).isRequired,\n  game: PropTypes.shape({\n    isPlaying: PropTypes.bool,\n    score: PropTypes.number.isRequired,\n    reset: PropTypes.func.isRequired,\n    hasWon: PropTypes.bool\n  }).isRequired\n}\n\nexport default GameService(\n  FoodService({\n    x: 5,\n    y: 5\n  })(\n    SnakeService({\n      x: 0,\n      y: 0\n    })(Board)\n  )\n)\n","import React from 'react'\nimport Board from './Board'\nimport './styles.scss'\n\nconst width = 12\nconst height = 12\n\nfunction App() {\n  return (\n    <div className=\"container mt-3\">\n      <Board\n        size={{\n          width,\n          height\n        }}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport App from 'App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}